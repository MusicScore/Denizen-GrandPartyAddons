###############################################################################
#                                                                             #
#                         FEVERDEATH DEFINITIONS LIST                         #
#                                                                             #
###############################################################################
# 
# For a detailed description of FeverDeath, please check out the readme.txt
# that should have come with the complete set of FeverDeath script files.
# 
# 
# 
# ----| ABOUT THIS SCRIPT
# 
# A series of YAML tag parsers made for FeverDeath. Scripts may use FeverDeath
# as a dependency by using the parsed YAML configuration options. Instructions
# on how to do this can be found in the USAGE section.
# 
# 
# ----| USAGE
# 
# To use FeverDeath as a dependency, simply call one to four of the definitions
# scripts by running one or more of the following commands:
# 
#   - inject 'gpa_feverDeath_generic_def'
#   - inject 'gpa_feverDeath_dd_def'
#   - inject 'gpa_feverDeath_t_def'
#   - inject 'gpa_feverDeath_al_def'
# 
# If you inject any of the last three scripts, you MUST ensure that
# "gpa_feverDeath_generic_def" is injected before the other scripts. All of
# these scripts have a built-in prefix builder, and they rely on the definition
# provided by "gpa_feverDeath_generic_def".
# 
# Details on what each does can be found by scrolling down to each appropriate
# task script.
# 
# Once these scripts are injected, you can use "<def[definition name]>" to call
# each option's value. This is, in fact, the most of what you'll need in terms
# of depending on FeverDeath.
# 
# 
# ----| CAVEATS
# 
# These task scripts do NOT automatically test for configuration errors! Even
# though it will fallback every tags to "null" if the tag type is invalid,
# these scripts assume that you will never use the "yaml" command to alter any
# configuration value.
# 
# If you do have to alter a configuration value via the "yaml" command, you
# you MUST include your own error checker! You may use parts of the main script
# (gpa_feverDeath_main) or simply call the configuration reload task
# (gpa_feverDeath_config). How to use the configuration reload task can be
# found in its script file.
# 


# 
# ----| Generic FeverDeath Options
# 
# To implement the FeverDeath general options, use:
# - inject 'gpa_feverDeath_generic_def'
# 
# Use the following definitions in your script to call the various options:
# - "fd_prefix"            : FeverDeath chat prefix
# 
gpa_feverDeath_generic_def:
  type: task
  debug: false
  speed: 0
  
  script:
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_main]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_generic_def"] WARNING: Missing the main FeverDeath script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_generic_def"] WARNING: Missing the FeverDeath configuration builder script!' 'to_console'
    - queue 'clear'
  }
  
  - define 'fd_prefix' '<yaml[gpa_feverdeath_config].read[general.prefix].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped||null>'
  - if '<def[fd_prefix]>' == 'null' || '<def[fd_prefix]>' == '' || '<def[fd_prefix]>' == 'none'
  {
    - define 'fd_prefix' '<&r>'
  }
  else
  {
    - define 'fd_prefix' '<def[fd_prefix]><&r> '
  }


# 
# ----| Death's Door Options
# 
# To implement the Death's Door options, use:
# - inject 'gpa_feverDeath_dd_def'
# 
# Use the following definitions in your script to call the various options:
# - "dd_enable"            : If Death's Door is enabled
# - "dd_prefix"            : Death's Door chat prefix
# - "dd_death.kill"        : Chance the player will die
# - "dd_death.title"       : Whether Death's Door titles are enabled
# - "dd_death.msgs"        : List of possible Death's Door chat messages
# - "dd_recover.enable"    : Whether the recovery phase is enabled
# - "dd_recover.time"      : How long the recovery phase lasts, in minutes
# - "dd_recover.msgs"      : List of possible recovery chat messages
# 
gpa_feverDeath_dd_def:
  type: task
  debug: false
  speed: 0
  
  script:
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_main]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_dd_def"] WARNING: Missing the main FeverDeath script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_dd_def"] WARNING: Missing the FeverDeath configuration builder script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_generic_def]>'
    - announce '[FeverDeath "gpa_feverDeath_dd_def"] WARNING: Missing the FeverDeath generic prefix definition script!' 'to_console'
    - queue 'clear'
  }
  
  - define 'dd_enable' '<yaml[gpa_feverdeath_config].read[deaths door.enabled].as_boolean||null>'
  - define 'dd_prefix' '<yaml[gpa_feverdeath_config].read[deaths door.prefix].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped||null>'
  - define 'dd_death.kill' '<yaml[gpa_feverdeath_config].read[deaths door.death.kill chance].as_decimal||null>'
  - define 'dd_death.title' '<yaml[gpa_feverdeath_config].read[deaths door.death.title enabled].as_boolean||null>'
  - define 'dd_death.msgs' '<yaml[gpa_feverdeath_config].read[deaths door.death.messages].as_list||null>'
  - define 'dd_recover.enable' '<yaml[gpa_feverdeath_config].read[deaths door.recovery.enabled].as_boolean||null>'
  - define 'dd_recover.time' '<yaml[gpa_feverdeath_config].read[deaths door.recovery.duration].as_decimal||null>'
  - define 'dd_recover.msgs' '<yaml[gpa_feverdeath_config].read[deaths door.recovery.messages].as_list||null>'
  - if '<def[dd_prefix]>' == 'null' || '<def[dd_prefix]>' == 'default'
  {
    - define 'dd_prefix' '<def[fd_prefix]>'
  }
  else if '<def[dd_prefix]>' == '' || '<def[dd_prefix]>' == 'none'
  {
    - define 'dd_prefix' '<&r>'
  }
  else
  {
    - define 'dd_prefix' '<def[dd_prefix]><&r> '
  }


# 
# ----| Thanatophobia Options
# 
# To implement the Thanatophobia options, use:
# - inject 'gpa_feverDeath_t_def'
# 
# Use the following definitions in your script to call the various options:
# - "t_enable"            : If Thanatophobia is enabled
# - "t_prefix"            : Thanatophobia chat prefix
# - "t_percent"           : Percent of health the player must have left to trigger
#                           Thanatophobia
# - "t_msgs.warn"         : List of possible warning messages
# - "t_msgs.recovery"     : List of possible recovery messages
# 
gpa_feverDeath_t_def:
  type: task
  debug: false
  speed: 0
  
  script:
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_main]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_t_def"] WARNING: Missing the main FeverDeath script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_t_def"] WARNING: Missing the FeverDeath configuration builder script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_generic_def]>'
    - announce '[FeverDeath "gpa_feverDeath_t_def"] WARNING: Missing the FeverDeath generic prefix definition script!' 'to_console'
    - queue 'clear'
  }
  
  - define 't_enable' '<yaml[gpa_feverdeath_config].read[thanatophobia.enabled].as_boolean||null>'
  - define 't_prefix' '<yaml[gpa_feverdeath_config].read[thanatophobia.prefix].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped||null>'
  - define 't_percent' '<yaml[gpa_feverdeath_config].read[thanatophobia.health percent].as_decimal||null>'
  - define 't_msgs.warn' '<yaml[gpa_feverdeath_config].read[thanatophobia.messages.warning].as_list||null>'
  - define 't_msgs.recovery' '<yaml[gpa_feverdeath_config].read[thanatophobia.messages.recovery].as_list||null>'
  - if '<def[t_prefix]>' == 'null' || '<def[t_prefix]>' == 'default'
  {
    - define 't_prefix' '<def[fd_prefix]>'
  }
  else if '<def[t_prefix]>' == '' || '<def[t_prefix]>' == 'none'
  {
    - define 't_prefix' '<&r>'
  }
  else
  {
    - define 't_prefix' '<def[t_prefix]><&r> '
  }


# 
# ----| Afterlife Options
# 
# To implement the Afterlife options, use:
# - inject 'gpa_feverDeath_al_def'
# 
# Use the following definitions in your script to call the various options:
# - "al_enable"            : If Afterlife is enabled
# - "al_prefix"            : Afterlife chat prefix
# - "al_instant"           : Whether players should instantly respawn
# - "al_bed"               : Whether players should respawn at their bed
# - "al_exp.enable"        : Whether custom EXP handling is enabled
# - "al_exp.drop"          : Whether lost EXP should be dropped
# - "al_exp.min"           : The minimum percent of EXP to lose
# - "al_exp.max"           : The maximum percent of EXP to lose
# - "al_inv.enable"        : Whether custom inventory handling is enabled
# - "al_inv.drop"          : Whether lost items should be dropped
# - "al_inv.hotbar"        : Whether the hotbar has less chance of losing items
# - "al_inv.min"           : The minimum percent chance of losing each item
# - "al_inv.max"           : The maximum percent chance of losing each item
# - "al_msg_enable"        : Whether Afterlife messages are enabled
# - "al_msgs"              : List of possible respawn messages (typically narrated
#                            only to the respawning player)
# 
gpa_feverDeath_al_def:
  type: task
  debug: false
  speed: 0
  
  script:
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_main]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_al_def"] WARNING: Missing the main FeverDeath script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config]>'
  {
    - announce '[FeverDeath "gpa_feverDeath_al_def"] WARNING: Missing the FeverDeath configuration builder script!' 'to_console'
    - queue 'clear'
  }
  - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_generic_def]>'
    - announce '[FeverDeath "gpa_feverDeath_al_def"] WARNING: Missing the FeverDeath generic prefix definition script!' 'to_console'
    - queue 'clear'
  }
  
  - define 'al_enable' '<yaml[gpa_feverdeath_config].read[afterlife.enabled].as_boolean||null>'
  - define 'al_prefix' '<yaml[gpa_feverdeath_config].read[afterlife.prefix].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped||null>'
  - define 'al_instant' '<yaml[gpa_feverdeath_config].read[afterlife.instant respawn].as_boolean||null>'
  - define 'al_bed' '<yaml[gpa_feverdeath_config].read[afterlife.bed respawn].as_boolean||null>'
  - define 'al_exp.enable' '<yaml[gpa_feverdeath_config].read[afterlife.experience handling.enable custom exp loss].as_boolean||null>'
  - define 'al_exp.drop' '<yaml[gpa_feverdeath_config].read[afterlife.experience handling.enable player exp drop].as_boolean||null>'
  - define 'al_exp.min' '<yaml[gpa_feverdeath_config].read[afterlife.experience handling.minimum percent lost].as_decimal||null>'
  - define 'al_exp.max' '<yaml[gpa_feverdeath_config].read[afterlife.experience handling.maximum percent lost].as_decimal||null>'
  - define 'al_inv.enable' '<yaml[gpa_feverdeath_config].read[afterlife.inventory handling.enable custom item loss].as_boolean||null>'
  - define 'al_inv.drop' '<yaml[gpa_feverdeath_config].read[afterlife.inventory handling.enable player item drop].as_boolean||null>'
  - define 'al_inv.hotbar' '<yaml[gpa_feverdeath_config].read[afterlife.inventory handling.enable tougher hotbar].as_boolean||null>'
  - define 'al_inv.min' '<yaml[gpa_feverdeath_config].read[afterlife.inventory handling.minimum loss chance].as_decimal||null>'
  - define 'al_inv.max' '<yaml[gpa_feverdeath_config].read[afterlife.inventory handling.maximum loss chance].as_decimal||null>'
  - define 'al_msg_enable' '<yaml[gpa_feverdeath_config].read[afterlife.enable messages].as_boolean||null>'
  - define 'al_msgs' '<yaml[gpa_feverdeath_config].read[afterlife.messages].as_list||null>'
  - if '<def[al_prefix]>' == 'null' || '<def[al_prefix]>' == 'default'
  {
    - define 'al_prefix' '<def[fd_prefix]>'
  }
  else if '<def[al_prefix]>' == '' || '<def[al_prefix]>' == 'none'
  {
    - define 'al_prefix' '<&r>'
  }
  else
  {
    - define 'al_prefix' '<def[al_prefix]><&r> '
  }