###############################################################################
#                                                                             #
#                            FEVERDEATH MAIN SCRIPT                           #
#                                                                             #
###############################################################################
# 
# For a detailed description of FeverDeath, please check out the readme.txt
# that should have come with the complete set of FeverDeath script files.
# 
# 
# 
# ----| ABOUT THIS SCRIPT
# 
# Welcome to the main file for FeverDeath! This file handles the actual
# functions of each module of FeverDeath. The priority each module gets is as
# follows:
# 
#   1. Death's Door
#   2. Afterlife
#   3. Thanatophobia
# 
# Even with the priority list above, none of the modules actually override each
# other. But, in the event that an update leads to the modules having
# conflicting functions, the priority list will be important to note.
# 
# 
# ----| CAVEATS
# 
# This entire file has been built to withstand most configuration errors that
# makes it past the checker in "gpa_feverDeath_config." Usually, such
# configuration errors can only be produced by using the Denizen "yaml"
# command.
#
# That being said, do NOT use the Denizen "yaml" command to edit values and
# options for FeverDeath. Just edit the configuration file and use "/feverdeath
# reload".
# 
# 
# ----| TO-DO LIST
# 
#  - Directly tamper with regular Golden Apples in terms of effects given upon
#    consumption. Super Golden Apples will be left as is.
#  - Curse of Binding increases ability of item to be preserved, but gives all
#    other items Curse of Vanishing.
#  - Curse of Vanishing (obviously) guarantees that the item will be lost, and
#    it will not be dropped.
#  - Introduced reduced health as a debuff and account for a varied max HP.
#  - Make the recovery phase debuffs stack up to a configurable amount of times
#    (6 being the absolute max, and 1 being the absolute min)
#  - Plausibly make a lore reader or custom enchantment listener that can
#    affect Afterlife inventory and EXP loss chances
#  - Make more options!
#    - Make more numbers configurable (e.g. hotbar persistence reduction)
#    - Make more events possible!
#    - Just make this entire addon completely customizable without having to
#      edit the scripts!
# 

gpa_feverDeath_main:
  type: world
  debug: false
  
  events:
    on shutdown:
    - inject 'locally' 'events.on script reload'
    
    on server start:
    - inject 'locally' 'events.on script reload'
    
    on script reload:
    - wait '1t'
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - narrate '<&c>[FeverDeath] WARNING: Not all FeverDeath scripts are detected! Disabling FeverDeath.'
      - if '<context.sender>' != 'server'
      {
        - announce '<&c>[FeverDeath] WARNING: Not all FeverDeath scripts are detected! Disabling FeverDeath.' 'to_console'
      }
      - queue 'clear'
    }
    - run 'gpa_feverDeath_config'
    
    on player damaged:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - define 'target' '<context.entity.as_player>'
    - if '<def[target].gamemode.id>' == '1' || '<def[target].gamemode.id>' == '3'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_generic_def'
    - inject 'gpa_feverDeath_dd_def'
    - inject 'gpa_feverDeath_t_def'
    - define 'dmg_inflict' '<context.final_damage>'
    
    #Death's Door mechanics: recovery phase
    - if '<def[dd_enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    - if '<def[dd_recover.enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    - if '<def[dd_enable]>' && '<def[dd_recover.enable]>' && '<def[target].flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' == '1'
    {
      - define 'dmg_inflict' '<context.final_damage.mul[1.1]>'
    }
    - determine 'passively' '<def[dmg_inflict]>'
    - mark 'skip_dd'
    
    #Thanatophobia mechanics: warning
    - if '<def[t_enable]>' == 'null'
    {
      - goto 'skip_t'
    }
    - if '<def[t_enable]>'
    {
      - if '<def[target].health.sub[<def[dmg_inflict]>]>' <= '0'
      {
        - goto 'skip_t'
      }
      - if '<def[t_msgs.warn]>' == 'null'
      {
        - goto 'skip_t'
      }
      - if '<def[t_percent]>' == 'null'
      {
        - goto 'skip_t'
      }
      - if '<def[t_percent]>' > '1'
      {
        - define 't_percent' '1'
      }
      else if '<def[t_percent]>' < '0.01'
      {
        - define 't_percent' '0.01'
      }
      
      - if '<def[target].health.sub[<def[dmg_inflict]>].div[<def[target].health.max>]>' < '<def[t_percent]>' && '!<def[target].has_flag[grandpartyaddons.feverdeath.thanatophobia]>'
      {
        - flag '<def[target]>' 'grandpartyaddons.feverdeath.thanatophobia'
        - narrate '<def[t_prefix]><&c>Your health is below <def[t_percent].mul[100].round_to[1]>%! <&f><def[t_msgs.warn].get[<util.random.int[1].to[<def[t_msgs.warn].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<def[target]>'
        - playsound '<def[target]>' 'sound:ENTITY_WITHER_HURT' 'volume:0.5' 'pitch:0.65'
      }
    }
    - mark 'skip_t'
    
    on player killed:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - if '<context.cause>' == 'suicide'
    {
      - queue 'clear'
    }
    
    - define 'target' '<context.entity.as_player>'
    - if '<def[target].gamemode.id>' == '1' || '<def[target].gamemode.id>' == '3'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_generic_def'
    - inject 'gpa_feverDeath_dd_def'
    - inject 'gpa_feverDeath_t_def'
    - inject 'gpa_feverDeath_al_def'
    - define 'only_al_msg' 'false'
    - define 'cancelled' 'false'
    
    #Death's Door mechanics: upon killed
    - if '<def[dd_enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    
    - if '<def[dd_enable]>'
    {
      - if '<def[dd_death.kill]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_death.title]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_death.msgs]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_recover.enable]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_recover.time]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_recover.msgs]>' == 'null'
      {
        - goto 'skip_dd'
      }
      
      - if '<def[dd_death.kill]>' > '1'
      {
        - define 'dd_death.kill' '1'
      }
      else if '<def[dd_death.kill]>' < '0.01'
      {
        - define 'dd_death.kill' '0.01'
      }
      - if '<def[dd_recover.time]>' < '1'
      {
        - define 'dd_recover.time' '1'
      }
      else if '<def[dd_recover.time]>' > '60'
      {
        - define 'dd_recover.time' '60'
      }
      
      - if '<def[target].flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' != '2'
      {
        - determine 'passively' '0'
        - define 'cancelled' 'true'
        - if '<queue.list.contains[q@gpa_feverDeath_dd_recovery_task_start_<def[target].uuid>]>'
        {
          - run 'gpa_feverDeath_ddRecovery' 'def:<player>|stop' 'id:gpa_feverDeath_dd_recovery_task_stop_<def[target].uuid>'
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.recovery:!'
          - if '<server.current_bossbars.contains[feverdeath.dd.recovery.<def[target].uuid>]>'
          {
            - bossbar 'remove' 'feverdeath.dd.recovery.<def[target].uuid>'
          }
        }
        - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.phase:2'
        - adjust '<def[target]>' 'health:0.1'
        - playsound '<def[target]>' 'sound:ENTITY_ENDERDRAGON_AMBIENT' 'volume:0.5' 'pitch:1.8'
        - if '<def[dd_death.title]>'
        {
         - title 'title:<&r>' 'subtitle:<&4><&l>Death<&sq>s Door' 'fade_in:1t' 'stay:2s' 'fade_out:2s' 'targets:<def[target]>'
        }
        - narrate '<def[dd_prefix]><&c>You are at Death<&sq>s Door! <&f><def[dd_death.msgs].get[<util.random.int[1].to[<def[dd_death.msgs].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<def[target]>'
      }
      else if '<def[target].flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' == '2'
      {
        - if '<util.random.int[1].to[10000]>' <= '<def[dd_death.kill].mul[10000]>'
        {
          - run 'gpa_feverDeath_ddRecovery' 'def:<player>|stop' 'id:gpa_feverDeath_dd_recovery_task_stop_<def[target].uuid>'
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.recovery:!'
          - if '<server.current_bossbars.contains[feverdeath.dd.recovery.<def[target].uuid>]>'
          {
            - bossbar 'remove' 'feverdeath.dd.recovery.<def[target].uuid>'
          }
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.phase:0'
        }
        else
        {
          - determine 'passively' '0'
          - define 'cancelled' 'true'
          - adjust '<def[target]>' 'health:0.1'
          - playsound '<def[target]>' 'sound:ENTITY_ENDERDRAGON_AMBIENT' 'volume:0.5' 'pitch:1.8'
          - if '<def[dd_death.title]>'
          {
            - title 'title:<&r>' 'subtitle:<&4><&l>Death<&sq>s Door' 'fade_in:1t' 'stay:2s' 'fade_out:2s' 'targets:<def[target]>'
          }
        }
      }
    }
    - mark 'skip_dd'
    
    #Thanatophobia mechanics: upon getting killed
    - if '<def[t_enable]>' == 'null'
    {
      - goto 'skip_t'
    }
    - if '<def[t_enable]>' && '<context.cancelled.not.OR[<def[cancelled].not>]>'
    {
      - flag '<def[target]>' 'grandpartyaddons.feverdeath.thanatophobia:!'
    }
    - mark 'skip_t'
    
    #Afterlife mechanics: instant respawn
    - if '<def[al_enable]>' == 'null'
    {
      - goto 'skip_al'
    }
    - if '<def[al_instant]>' == 'null'
    {
      - goto 'skip_al'
    }
    
    - if '<def[al_enable]>' && '<def[al_instant]>'
    {
      - if '<def[al_exp.enable]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.drop]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.min]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.max]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.enable]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.drop]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.hotbar]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.min]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.max]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_msg_enable]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_msgs]>' == 'null'
      {
        - goto 'skip_al'
      }
    
      - if '<context.cancelled>' || '<def[cancelled]>'
      {
        - queue 'clear'
      }
      else
      {
        - determine 'passively' 'cancelled'
      }
      
      - define 'target_d_xp_loc' '<def[target].location>'
      - define 'target_d_i_loc' '<def[target].location>'
      
      - if '<def[al_exp.min]>' < '0'
      {
        - define 'al_exp.min' '0'
      }
      else if '<def[al_exp.min]>' > '1'
      {
        - define 'al_exp.min' '1'
      }
      - if '<def[al_exp.max]>' < '0'
      {
        - define 'al_exp.max' '0'
      }
      else if '<def[al_exp.max]>' > '1'
      {
        - define 'al_exp.max' '1'
      }
      - if '<def[al_exp.max]>' < '<def[al_exp.min]>'
      {
        - define 'al_exp.max' '<def[al_exp.min]>'
      }
      
      - if '<def[al_inv.min]>' < '0'
      {
        - define 'al_inv.min' '0'
      }
      else if '<def[al_inv.min]>' > '1'
      {
        - define 'al_inv.max' '1'
      }
      - if '<def[al_inv.max]>' < '0'
      {
        - define 'al_inv.max' '0'
      }
      else if '<def[al_inv.max]>' > '1'
      {
        - define 'al_inv.max' '1'
      }
      - if '<def[al_inv.max]>' < '<def[al_inv.min]>'
      {
        - define 'al_inv.max' '<def[al_inv.min]>'
      }
      
      - narrate '<def[al_enable].not> <def[al_instant].not> <context.cancelled> <def[cancelled]>' 'targets:<server.list_online_players>'
      - adjust '<def[target]>' 'health:<def[target].health.max>'
      - adjust '<def[target]>' 'food_level:20'
      - adjust '<def[target]>' 'saturation:5'
      - adjust '<def[target]>' 'exhaustion:0'
      - cast 'SLOW' '<def[target]>' 'duration:3s' 'power:3'
      - cast 'BLINDNESS' '<def[target]>' 'duration:2.2s' 'power:0'
      - cast 'NIGHT_VISION' '<def[target]>' 'duration:2s' 'power:0'
      
      - if '<def[al_bed]>'
      {
        - teleport '<def[target]>' '<def[target].bed_spawn]>'
      }
      else
      {
        - teleport '<def[target]>' '<w@world.spawn_location>'
      }
      
      - define 'dropped_xp' '<def[target].xp.level.mul[7]>'
      - if '<def[dropped_xp]>' > '100'
      {
        - define 'dropped_xp' '100'
      }
      - if '<def[al_exp.enable]>'
      {
        - define 'lost_xp' '<def[target].xp.total.mul[<util.random.decimal[<def[al_exp.min]>].to[<def[al_exp.max]>]>]>'
        - experience 'give' '<def[lost_xp].mul[-1]>' 'player:<def[target]>'
        - define 'dropped_xp' '<def[lost_xp].mul[0.25].round_down>'
        - if '<def[dropped_xp]>' > '300'
        {
          - define 'dropped_xp' '300'
        }
      }
      else
      {
        - experience 'give' '<def[target].xp.total.mul[-1]>' 'player:<def[target]>'
      }
      - if '<def[al_exp.drop]>'
      {
        - define 'leftover_xp' '<def[dropped_xp]>'
        - repeat '<def[dropped_xp].div[15].round_up>'
        {
          - if '<def[leftover_xp].sub[15]>' >= '0'
          {
            - drop 'xp' '<def[target_d_xp_loc]>' 'quantity:15'
            - define 'leftover_xp' '<def[leftover_xp].sub[15]>'
          }
          else
          {
            - drop 'xp' '<def[target_d_xp_loc]>' 'quantity:<def[leftover_xp]>'
            - define 'leftover_xp' '0'
          }
        }
      }
      
      - define 'player_inv' '<def[target].inventory.list_contents>'
      - define 'inv_lost' 'li@'
      - if '<def[al_inv.enable]>'
      {
        - define 'inv_loss_chance' '0'
        - foreach '<def[target].inventory.list_contents>'
        {
          - define 'inv_loss_chance' '<util.random.decimal[<def[al_inv.min]>].to[<def[al_inv.max]>]>'
          - if '<def[al_inv.hotbar]>' && '<def[loop_index]>' <= '9'
          {
            - define 'inv_loss_chance' '<util.random.decimal[<def[al_inv.min].div[2]>].to[<def[al_inv.max].mul[0.8]>]>'
          }
          - if '<util.random.int[1].to[10000]>' <= '<def[inv_loss_chance].mul[10000]>'
          {
            - define 'player_inv' '<def[player_inv].set[i@air].at[<def[loop_index]>]>'
            - define 'inv_lost' '<def[inv_lost].as_list.include[<def[value]>]>'
          }
        }
        - adjust '<def[target]>' 'inventory_contents:<def[player_inv]>'
      }
      else
      {
        - define 'inv_lost' '<def[player_inv].exclude[i@air]>'
        - foreach '<def[target].inventory.list_contents>'
        {
          - define 'player_inv' '<def[player_inv].set[i@air].at[<def[loop_index]>]>'
        }
        - adjust '<def[target]>' 'inventory_contents:<def[player_inv]>'
      }
      - if '<def[al_inv.drop]>'
      {
        - drop '<def[inv_lost].exclude[i@air]>' '<def[target_d_i_loc]>'
      }
      
      - if '<def[al_msg_enable]>'
      {
        - narrate '<def[al_prefix]><&f><def[al_msgs].get[<util.random.int[1].to[<def[al_msgs].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<def[target]>'
      }
    }
    - mark 'skip_al'
    
    on player death:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - define 'target' '<context.entity.as_player>'
    - if '<def[target].gamemode.id>' == '1' || '<def[target].gamemode.id>' == '3'
    {
      - queue 'clear'
    }
    - inject 'gpa_feverDeath_generic_def'
    - inject 'gpa_feverDeath_al_def'
    
    - if '<def[al_enable]>' == 'null'
    {
      - goto 'skip_al'
    }
    - if '<def[al_instant]>' == 'null'
    {
      - goto 'skip_al'
    }
    
    - if '<def[al_enable]>' && '!<def[al_instant]>'
    {
      - if '<def[al_exp.enable]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.drop]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.min]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_exp.max]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.enable]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.drop]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.hotbar]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.min]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_inv.max]>' == 'null'
      {
        - goto 'skip_al'
      }
      - if '<def[al_msgs]>' == 'null'
      {
        - goto 'skip_al'
      }
      
      - if '<def[al_exp.min]>' < '0'
      {
        - define 'al_exp.min' '0'
      }
      else if '<def[al_exp.min]>' > '1'
      {
        - define 'al_exp.min' '1'
      }
      - if '<def[al_exp.max]>' < '0'
      {
        - define 'al_exp.max' '0'
      }
      else if '<def[al_exp.max]>' > '1'
      {
        - define 'al_exp.max' '1'
      }
      - if '<def[al_exp.max]>' < '<def[al_exp.min]>'
      {
        - define 'al_exp.max' '<def[al_exp.min]>'
      }
      
      - if '<def[al_inv.min]>' < '0'
      {
        - define 'al_inv.min' '0'
      }
      else if '<def[al_inv.min]>' > '1'
      {
        - define 'al_inv.max' '1'
      }
      - if '<def[al_inv.max]>' < '0'
      {
        - define 'al_inv.max' '0'
      }
      else if '<def[al_inv.max]>' > '1'
      {
        - define 'al_inv.max' '1'
      }
      - if '<def[al_inv.max]>' < '<def[al_inv.min]>'
      {
        - define 'al_inv.max' '<def[al_inv.min]>'
      }
      
      #Afterlife mechanics: instant respawn disabled
      - determine 'passively' 'KEEP_LEVEL'
      - determine 'passively' 'KEEP_INV'
      
      - define 'dropped_xp' '<def[target].xp.level.mul[7]>'
      - if '<def[dropped_xp]>' > '100'
      {
        - define 'dropped_xp' '100'
      }
      
      - if '<def[al_exp.enable]>'
      {
        - define 'lost_xp' '<def[target].xp.total.mul[<util.random.decimal[<def[al_exp.min]>].to[<def[al_exp.max]>]>]>'
        - define 'dropped_xp' '<def[lost_xp].mul[0.25].round_down>'
        - if '<def[dropped_xp]>' > '300'
        {
          - define 'dropped_xp' '300'
        }
        - experience 'give' '<def[lost_xp].mul[-1]>' 'player:<def[target]>'
      }
      else
      {
        - experience 'give' '<def[target].xp.total.mul[-1]>' 'player:<def[target]>'
      }
      - if '<def[al_exp.drop]>'
      {
        - determine 'passively' '<def[dropped_xp]>'
      }
      else
      {
        - determine 'passively' 'NO_XP'
      }
      
      - if '<def[al_inv.enable]>'
      {
        - define 'player_inv' '<def[target].inventory.list_contents>'
        - define 'inv_loss_chance' '0'
        - define 'inv_lost' 'li@'
        - foreach '<def[target].inventory.list_contents>'
        {
          - define 'inv_loss_chance' '<util.random.decimal[<def[al_inv.min]>].to[<def[al_inv.max]>]>'
          - if '<def[al_inv.hotbar]>' && '<def[loop_index]>' <= '9'
          {
            - define 'inv_loss_chance' '<util.random.decimal[<def[al_inv.min].div[2]>].to[<def[al_inv.max].mul[0.8]>]>'
          }
          - if '<util.random.int[1].to[10000]>' <= '<def[inv_loss_chance].mul[10000]>'
          {
            - define 'player_inv' '<def[player_inv].set[i@air].at[<def[loop_index]>]>'
            - define 'inv_lost' '<def[inv_lost].as_list.include[<def[value]>]>'
          }
        }
        - adjust '<def[target]>' 'inventory_contents:<def[player_inv]>'
      }
      else
      {
        - define 'inv_lost' '<def[player_inv]>'
      }
      
      - if '<def[al_inv.drop]>'
      {
        - determine 'passively' '<def[inv_lost].exclude[i@air]>' 
      }
      else
      {
        - determine 'passively' 'NO_DROPS'
      }
    }
    - mark 'skip_al'
        
    on player respawns:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - if '<player.gamemode.id>' == '1' || '<player.gamemode.id>' == '3'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_generic_def'
    - inject 'gpa_feverDeath_al_def'
    
    - if '<def[al_enable]>' == 'null'
    {
      - goto 'skip_al'
    }
    - if '<def[al_instant]>' == 'null'
    {
      - goto 'skip_al'
    }
    
    #Afterlife mechanics: determine respawn location if instant respawn is disabled
    - if '<def[al_enable]>' && '!<def[al_instant]>'
    {
      - if '<def[al_msg_enable]>' == 'null'
      {
        - queue 'clear'
      }
      - if '<def[al_bed]>' == 'null'
      {
        - queue 'clear'
      }
      - if '<def[al_bed]>'
      {
        - determine 'passively' '<player.bed_spawn>'
      }
      else
      {
        - determine 'passively' '<w@world.spawn_location>'
      }
      
      - if '<def[al_msg_enable]>'
      {
        - narrate '<def[al_prefix]><&f><def[al_msgs].get[<util.random.int[1].to[<def[al_msgs].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<player>'
      }
    }
    - mark 'skip_al'
    
    on player heals:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - define 'target' '<context.entity.as_player>'
    - if '<def[target].gamemode.id>' == '1' || '<def[target].gamemode.id>' == '3'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_generic_def'
    - inject 'gpa_feverDeath_dd_def'
    - inject 'gpa_feverDeath_t_def'
    
    #Death's Door mechanics: recovery
    - if '<def[dd_enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    
    - if '<def[dd_enable]>'
    {
      - if '<def[dd_recover.enable]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_recover.msgs]>' == 'null'
      {
        - goto 'skip_dd'
      }
      - if '<def[dd_recover.time]>' == 'null'
      {
        - goto 'skip_to_t'
      }
      
      - if '<def[dd_recover.time]>' < '1'
      {
        - define 'dd_recover.time' '1'
      }
      else if '<def[dd_recover.time]>' > '60'
      {
        - define 'dd_recover.time' '60'
      }
      - if '<def[target].flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' == '2'
      {
        - if '<li@SATIATED|REGEN.contains[<context.reason>]>'
        {
          - determine 'passively' '0'
          - queue 'clear'
        }
        - if '<def[dd_recover.enable]>'
        {
          - bossbar 'create' 'feverdeath.dd.recovery.<def[target].uuid>' 'players:<def[target]>' 'title:<&c>Death<&sq>s Door Debuff Timer' 'progress:1' 'color:RED' 'style:SOLID' 'flags:CREATE_FOG'
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.phase:1'
          - narrate '<def[dd_prefix]><&7><def[dd_recover.msgs].get[<util.random.int[1].to[<def[dd_recover.msgs].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<def[target]>'
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.recovery:<def[dd_recover.time]>m'
          - run 'gpa_feverDeath_ddRecovery' 'def:<def[target]>|start|<def[target].flag[grandpartyaddons.feverdeath.deaths door.recovery]>' 'id:gpa_feverDeath_dd_recovery_task_start_<def[target].uuid>'
          - queue 'clear'
        }
        else
        {
          - flag '<def[target]>' 'grandpartyaddons.feverdeath.deaths door.phase:0'
        }
      }
      else if '<def[target].flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' == '1'
      {
        - if '<def[target].health.add[<context.amount>]>' > '<def[target].health.max.mul[0.85]>'
        {
          - determine 'passively' '<def[target].health.max.mul[0.85].sub[<def[target].health>]>'
        }
        else
        {
          - determine 'passively' '<context.amount.mul[0.9]>'
        }
        - queue 'clear'
      }
    }
    - mark 'skip_dd'
    
    - if '<def[t_enable]>' == 'null'
    {
      - goto 'skip_t'
    }
    - if '<def[t_msgs.recovery]>' == 'null'
    {
      - goto 'skip_t'
    }
    
    #Thanatophobia mechanics
    - if '<def[t_enable]>'
    {
      - if '<def[t_percent]>' == 'null'
      {
        - goto 'skip_t'
      }
      
      - if '<def[t_percent]>' < '0.01'
      {
        - define 't_percent' '0.01'
      }
      else if '<def[t_percent]>' > '1'
      {
        - define 't_percent' '1'
      }
      - if '<def[target].health.add[<context.amount>].div[<def[target].health.max>]>' >= '<def[t_percent]>' && '<def[target].has_flag[grandpartyaddons.feverdeath.thanatophobia]||false>'
      {
        - flag '<def[target]>' 'grandpartyaddons.feverdeath.thanatophobia:!'
        - narrate '<def[t_prefix]><&f><def[t_msgs.recovery].get[<util.random.int[1].to[<def[t_msgs.recovery].size>]>].replace[&&].with[&ss].replace[&pc].with[<&pc>].unescaped>' 'targets:<def[target]>'
      }
    }
    - mark 'skip_t'
    
    on player quits:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_dd_def'
    
    - if '<def[dd_enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    - if '<def[dd_recover.enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    
    - if '<def[dd_enable]>'
    {
      - if '<player.flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' != '1'
      {
        - flag '<player>' 'grandpartyaddons.feverdeath.deaths door.recovery:0'
      }
      else if '<player.flag[grandpartyaddons.feverdeath.deaths door.recovery]||0>' == '1'
      {
        - run 'gpa_feverDeath_ddRecovery' 'def:<player>|stop' 'id:gpa_feverDeath_dd_recovery_task_stop_<player.uuid>'
      }
    }
    - mark 'skip_dd'
    
    on player joins:
    - if '!<server.list_scripts.parse[name].contains[gpa_feverDeath_config|gpa_feverDeath_generic_def|gpa_feverDeath_dd_def|gpa_feverDeath_t_def|gpa_feverDeath_al_def|gpa_feverDeath_ddRecovery|gpa_feverDeath_ddRecovery_timer_task|gpa_feverDeath_cmd]>'
    {
      - queue 'clear'
    }
    
    - inject 'gpa_feverDeath_dd_def'
    
    - if '<def[dd_enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    - if '<def[dd_recover.enable]>' == 'null'
    {
      - goto 'skip_dd'
    }
    
    - if '<def[dd_enable]>'
    {
      - if '<player.flag[grandpartyaddons.feverdeath.deaths door.phase]||0>' != '1'
      {
        - flag '<player>' 'grandpartyaddons.feverdeath.deaths door.recovery:0'
      }
      else if '<player.flag[grandpartyaddons.feverdeath.deaths door.recovery]||0>' == '1'
      {
        - run 'gpa_feverDeath_ddRecovery' 'def:<player>|stop' 'id:gpa_feverDeath_dd_recovery_task_stop_<player.uuid>'
      }
    }
    - mark 'skip_dd'