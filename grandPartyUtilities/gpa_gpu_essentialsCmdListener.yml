###############################################################################
#                                                                             #
#               GRANDPARTYUTILITIES: ESSENTIALS COMMAND LISTENER              #
#                                                                             #
###############################################################################
# 
# This script requires "gpa_gpu_main.yml" for access to certain configuration
# options!
# 
# 
# ----| ABOUT THIS SCRIPT
# 
# This script taps into some Essentials commands that insert values unrecorded
# by Depenizen (such as separate spawn locations) and commands that don't meet
# up to standards.
# 
# The commands listened to are:
# 
#   - /setspawn        : Records the spawnpoint specified. Supports recording
#                        per-group spawnpoints.
#   - /setwarp         : Records warp locations.
#   - /delwarp         : Removes a recorded warp location.
#   - /clearinventory  : Also checks offhand, armor slots, and clears out items
#                        based on material. Ignores specific NBT tags.
#   - /ping            : Returns an actual value instead of going "Pong!"
# 
# 
# ----| HOW TO USE
# 
# To get the spawnpoints recorded, use these tags:
# 
#   + <server.flag[grandpartyaddons.gpu.essentials_spawn_location.worlds.<world name>]>
#     - grabs the spawn location for the specified world
#   + <server.flag[grandpartyaddons.gpu.essentials_spawn_location.groups.<group name>]>
#     - grabs the spawn location for the specified permissions group
#   + <server.flag[grandpartyaddons.gpu.essentials_warps.<warp name>]>
#     - grabs the location for the specified warp
# 
# 


gpa_gpu_essentialsCmdListener:
  type: world
  debug: false
  events:
    # Record /setspawn locations
    on setspawn|esetspawn command:
    - if <server.list_files[../].filter[ends_with[.jar]].filter[starts_with[Essentials]].is_empty> || <context.server> {
      - queue clear
    }
    - if !<player.has_permission[essentials.setspawn]> {
      - queue clear
    }
    - define spawn_loc '<player.location.center.sub[0.5,0.5,0.5].with_pose[<player.location.pitch.round_to[2]>,<player.location.yaw.round_to[2]>]>'
    - if <context.args.get[1]||default> == default {
      - adjust <player.location.world> 'spawn_location:<def[spawn_loc]>'
      - flag server 'grandpartyaddons.gpu.essentials_spawn_location.worlds.<def[spawn_loc].world.name>:<def[spawn_loc]>'
    }
    - flag server 'grandpartyaddons.gpu.essentials_spawn_location.groups.<context.args.get[1]||default>:<def[spawn_loc]>'

    # Record /setwarp locations
    on setwarp|createwarp|ecreatewarp|esetwarp command:
    - if <server.list_files[../].filter[ends_with[.jar]].filter[starts_with[Essentials]].is_empty> || <context.server> {
      - queue clear
    }
    - if !<player.has_permission[essentials.setwarp]> {
      - queue clear
    }
    - define pl_loc '<player.location.center.sub[0.5,0.5,0.5].with_pose[<player.location.pitch.round_to[2]>,<player.location.yaw.round_to[2]>]>'
    - flag server 'grandpartyaddons.gpu.essentials_warps.<context.args.get[1]>:<def[pl_loc]>'

    # Remove warps from recorded list
    on delwarp|edelwarp|remwarp|eremwarp|rmwarp|ermwarp command:
    - if <server.list_files[../].filter[ends_with[.jar]].filter[starts_with[Essentials]].is_empty> || <context.server> {
      - queue clear
    }
    - if !<player.has_permission[essentials.delwarp]> {
      - queue clear
    }
    - flag server 'grandpartyaddons.gpu.essentials_warps.<context.args.get[1]>:!'

    # Improve /clearinventory
    on clearinventory|ci|eci|clean|eclean|clear|eclear|clearinvent|eclearinvent|eclearinventory command:
    - if <server.list_files[../].filter[ends_with[.jar]].filter[starts_with[Essentials]].is_empty> || '!<yaml[gpa_gpu_config].read[essentials listener.add more functionality to clearinventory].as_boolean||true>' {
      - queue clear
    }
    - if !<player.has_permission[essentials.clearinventory]||true> && !<context.server> {
      - narrate '<&c>Error<&co> <&4>You do not have permission to clear inventories.'
      - determine 'FULFILLED'
    }
    - if <context.args.get[1]||<player||null>> == '*' {
      - if !<context.server> && !<player.has_permission[essentials.clearinventory.all]||false> {
        - narrate '<&c>Error<&co> <&4>You do not have permission to clear all player<&sq> inventories.'
        - determine 'FULFILLED'
      }
      - define target '<server.list_online_players>'
    }
    else {
      - define target '<context.args.get[1].as_player||<player||null>>'
      - if !<context.server> && <def[target]||null> != <player||null> && !<player.has_permission[essentials.clearinventory.others]||false> {
        - narrate '<&c>Error<&co> <&4>You do not have permission to clear other player<&sq> inventories.'
        - determine 'FULFILLED'
      }
    }
    - if <context.server.and[<def[target].is_online.not||true>]> {
      - narrate '<&c>Error<&co> <&4>Player not found.'
      - determine 'FULFILLED'
    }
    - if <li@*|**|null.contains[<context.args.get[2]||null>]> {
      - adjust <def[target]> 'inventory_contents:'
    }
    else if !<li@*|**.contains[<context.args.get[2]>]> && !<server.list_materials.exclude[air].include[*|**].contains[<context.args.get[2].before_last[:].as_material.name||null>]> {
      - narrate '<&c>Error<&co> <&4>Unknown item name<&co> <context.args.get[2]>.'
    }
    else {
      - foreach <def[target].as_list> {
        - define cl_t '<def[value]>'
        - define cl_list 'li@'
        - define cl_count '<context.args.get[3]||10000>'
        - define cl_taken '0'
        - foreach <def[cl_t].inventory.list_contents> {
          - if <def[value].material> == '<context.args.get[2].replace[:].with[,].as_material>' {
            - if <def[cl_count]> == 0 {
              - define cl_list '<def[cl_list].include[<def[value]>]>'
            }
            else if <def[cl_count]> < <def[value].quantity> {
              - adjust <def[value]> 'quantity:<def[value].quantity.sub[<def[cl_count]>]>' 'save:ri'
              - define cl_list '<def[cl_list].include[<entry[ri].result>]>'
              - define cl_taken '<def[cl_taken].add[<def[cl_count]>]>'
              - define cl_count '0'
            }
            else if <def[cl_count]> == <def[value].quantity> {
              - define cl_list '<def[cl_list].include[i@air]>'
              - define cl_taken '<def[cl_taken].add[<def[cl_count]>]>'
              - define cl_count '0'
            }
            else {
              - define cl_count '<def[cl_count].sub[<def[value].quantity>]>'
              - define cl_list '<def[cl_list].include[i@air]>'
              - define cl_taken '<def[cl_taken].add[<def[value].quantity>]>'
            }
          }
          else {
            - define cl_list '<def[cl_list].include[<def[value]>]>'
          }
          - foreach next
        }
        - adjust <def[cl_t]> 'inventory_contents:<def[cl_list]>'
        - if <server.list_materials.exclude[air].contains[<context.args.get[2].before_last[:].as_material.name||null>]> {
          - narrate '<&6>Cleared <&a><def[cl_taken]> <context.args.get[2].before_last[:].as_material.name> <&6>from <def[cl_t].name>.'
        }
        else {
          - narrate '<&6>Cleared inventory of <def[cl_t].name>.'
        }
      }
    }
    - mark 
    - determine 'FULFILLED'
    ######################
    # /ci <player|*> <item:data|*|**> <amount>
    ######################

    # Improve /ping
    on ping|echo|eecho|eping|pong|epong command:
    - if <server.list_files[../].filter[ends_with[.jar]].filter[starts_with[Essentials]].is_empty> || '!<yaml[gpa_gpu_config].read[essentials listener.return ping number].as_boolean||true>' {
      - queue clear
    }
    - if <context.server> {
      - define rv_lines 'li@https&co//goo&dotgl/pN32LX|https&co//goo&dotgl/wTLLbn|https&co//goo&dotgl/WTjhYa|https&co//goo&dotgl/5SdyoD'
      - announce '0ms. [ <def[rv_lines].get[<util.random.int[1].to[<def[rv_lines].size>]>].unescaped> ]' to_console
    }
    else {
      - if !<player.has_permission[essentials.ping]> {
        - queue clear
      }
      - narrate '<&6>Pong! <player.ping>ms'
    }
    - determine 'FULFILLED'