###############################################################################
#                                                                             #
#                          GRANDPARTYUTILITIES: MAIN                          #
#                                                                             #
###############################################################################
# 
# The main GrandPartyUtilities script.
# 
# 
# ----| ABOUT THIS SCRIPT
# 
# The main component of GrandPartyUtilities. Comes with a config generator
# that contains options for all GrandPartyUtilities scripts, even if those
# scripts are not installed.
# 
# 
# ----| HOW TO USE
# 
# To reload the config, you must reload all dScripts by using this command:
#   - /denizen reload scripts
# 
# There are currently no built-in commands to handle this.
# 
# 
# To grab an offline player's name, use these tags:
# 
#   + <p@player.flag[display_name.prefix]>
#   + <p@player.flag[display_name.suffix]>
#   + <p@player.flag[display_name.nickname]>
# 
# 
# ----| CAVEATS
# 
# Even though this script supports 1.8.8 to 1.12, it requires the latest
# developmental version of Denizen.
# 
# 


gpa_gpu_main:
  type: world
  debug: false
  version: '0.2.1.1'
  events:
    on server start:
    - ~run gpa_gpu_config
    - inject locally 'events.on script reload' instantly

    on script reload:
    - ~webget 'https://raw.githubusercontent.com/MusicScore/Denizen-GrandPartyAddons/master/versions_list.txt' save:dscript_versions
    - if <entry[dscript_versions].failed||true> {
      - queue clear
    }
    - if <s@gpa_gpu_main.yaml_key[version]||null> == null {
      - narrate '<&c>An unsupported version of GrandPartyUtilities has been detected! Consider downloading a legitimate version.'
      - queue clear
    }
    - define v '<entry[dscript_versions].result.split[;].map_get[grandpartyutilities].split_by[:]||null>'
    - define vl 'li@<def[v]>|<s@gpa_gpu_main.yaml_key[version]||null>'
    - if <def[v]> != <s@gpa_gpu_main.yaml_key[version]> {
      - if <def[vl].alphanumeric.last> == <def[v]> {
        - narrate '<&c>Your version of GrandPartyUtilities is outdated! Most updated version is <&4><def[v]><&r><&c>.'
        - queue clear
      }
      - narrate '<&c>Your version of GrandPartyUtilities is unsupported or the version database has not been updated yet. Please refer to the issues page for all GrandPartyAddons for support.'
    }

    on player joins:
    - define null 'null-<util.random.uuid>'
    - if <player.chat_prefix||<def[null]>> == <def[null]> {
      - queue clear
    }
    - flag <player> 'display_name.prefix:<player.chat_prefix||>'
    - flag <player> 'display_name.suffix:<player.chat_suffix||>'
    - flag <player> 'display_name.nickname:<player.name.display.replace[<player.chat_prefix>].replace[<player.chat_suffix>]>'

    on player quits:
    - define null 'null-<util.random.uuid>'
    - if <player.chat_prefix||<def[null]>> == <def[null]> {
      - queue clear
    }
    - flag <player> 'display_name.prefix:<player.chat_prefix>'
    - flag <player> 'display_name.suffix:<player.chat_suffix>'
    - flag <player> 'display_name.nickname:<player.name.display.replace[<player.chat_prefix>].replace[<player.chat_suffix>]>'

gpa_gpu_config:
  type: task
  speed: 0
  debug: false
  script:
  - define debug_enable 'false'
  - define essentials.clear_func 'true'
  - define essentials.ping 'true'
  
  - if !<yaml.list.contains[gpa_grandpartyutilities_config]> {
    - yaml create id:gpa_grandpartyutilities_config
  }
  - if <server.has_file[../GrandPartyUtilities/config.yml]||false> {
    - yaml load:../GrandPartyUtilities/config.yml id:gpa_grandpartyutilities_config
    - if !<yaml.list.contains[gpa_grandpartyutilities_config]> {
      - yaml create id:gpa_grandpartyutilities_config
    }
  }
  else {
    - yaml savefile:../GrandPartyUtilities/config.yml id:gpa_grandpartyutilities_config
  }
  # Run through each value and see if any are invalid
  - yaml set 'general.enable debug:<yaml[gpa_grandpartyutilities_config].read[general.enable debug].as_boolean||<def[debug_enable]>>' id:gpa_grandpartyutilities_config
  - yaml set 'essentials cmd listener.add more functionality to clearinventory:<yaml[gpa_grandpartyutilities_config].read[essentials cmd listener.add more functionality to clearinventory].as_boolean||<def[essentials.clear_func]>>' id:gpa_grandpartyutilities_config
  - yaml set 'essentials cmd listener.return ping number:<yaml[gpa_grandpartyutilities_config].read[essentials cmd listener.return ping number].as_boolean||<def[essentials.ping]>>' id:gpa_grandpartyutilities_config
  # Generate/Regenerate config file
  - log '' type:clear file:./plugins/GrandPartyUtilities/config.yml
  - log '#####################################################################################' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '#                                                                                   #' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '#                            GRANDPARTYUTILITIES CONFIG                             #' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '#                                                                                   #' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '#####################################################################################' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '# ' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '# Access to configurable options for all GrandPartyUtilities scripts. If you do not' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '# have a certain script, the respective option will do nothing.' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '# ' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '# ' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log 'general:' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    # Prints out debug on loaded GrandPartyUtilities scripts when the main script is' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    # reloaded via <&dq>/denizen reload<&dq>' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    enable debug: <yaml[gpa_grandpartyutilities_config].read[general.enable debug]>' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log 'essentials cmd listener:' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    # Override /essentials:clearinventory to also clear armor and offhand slot' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    add more functionality to clearinventory: <yaml[gpa_grandpartyutilities_config].read[essentials cmd listener.add more functionality to clearinventory]>' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    # Return a number when using /essentials:ping instead of returning <&dq>Pong!<&dq>.' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '    return ping number: <yaml[gpa_grandpartyutilities_config].read[essentials cmd listener.return ping number]>' type:none file:./plugins/GrandPartyUtilities/config.yml
  - log '' type:none file:./plugins/GrandPartyUtilities/config.yml

  - if '<yaml[gpa_grandpartyutilities_config].read[general.enable debug].not||false>' {
    - queue clear
  }
  - define d_list 'li@<&nl><&a>[GrandPartyUtilities] <&f>Reloading all components of GrandPartyUtilities<&dot><&dot><&dot>'
  - foreach <server.list_scripts.exclude[s@gpa_gpu_main|s@gpa_gpu_config]> {
    - if <def[value].starts_with[s@gpa_gpu_]> {
      - define d_list '<def[d_list].include[<&a>[GrandPartyUtilities] <&f>Detected <&7><def[value].name.to_lowercase><&f><&dot>]>'
      - if <def[value]> == 's@gpa_gpu_versionCheck' {
        - define d_list '<def[d_list].include[<&a>[GrandPartyUtilities] <&f>Registered version ID<&co> <proc[gpa_gpu_versionCheck]><&dot>]>'
      }
    }
  }
  - if !<def[d_list].is_empty> {
    - define d_list '<def[d_list].include[<&r>]>'
  }
  - announce '<def[d_list].separated_by[<&nl>]><&a>[GrandPartyUtilities] <&f>Loaded all detected components of GrandPartyUtilities.' to_console
