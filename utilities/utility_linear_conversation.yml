gpa_utility_linear_conversation_task:
  type: task
  debug: false
  speed: 0
  definitions: name|id|step
  script:
  - if <player||null> == null {
    - debug ERROR 'A valid attached dPlayer is needed for this script to run!'
    - queue clear
  }
  - define ymldata <server.flag[grandpartyaddons.utility.linear_conversations.loaded.<def[name]>]||null+>
  - if !<yaml.list.contains_text[<def[ymldata]>]> {
    - announce to_console '<&c>WARNING! <&f>The YAML configuration/file for <&dq><def[name]><&dq> is invalid or does not exist!'
      format:gpa_utility_linear_conversation_format
    - queue clear
  }

  - define step <def[step]||<player.flag[grandpartyaddons.utility.linear_conversation.<def[name]>].add[1]||1>>
  - define text <parse:<yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.text]||null>>
  - narrate '<def[text].unescaped.parse_color[%].replace[\n].with[<&nl>]>'

  - define null null<util.random.uuid.replace[-]>
  - if <yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.script]||<def[null]>> != <def[null]> {
    - if <server.list_scripts.contains[s@<yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.script]>]> {
      - run <yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.script]> instantly def:<def[name]>|<def[step]>
    }
  }

  - if !<yaml[<def[ymldata]>].contains[<def[name]>.<def[step].add[1]>]>
    || <yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.delay]||-1> < 0 {
    - flag player grandpartyaddons.utility.linear_conversation.<def[name]>:!
    - queue clear
  }

  - flag player grandpartyaddons.utility.linear_conversation.<def[name]>:<def[step]>
  - wait <yaml[<def[ymldata]>].read[<def[name]>.<def[step]>.delay]>s

  - if <def[id]||false> {
    - run <script> def:<def[name]>|true id:gpa_utility_lcu_<player.uuid.replace[-]>_c_<def[name]>_s_<def[step].add[1]>
  }
  else {
    - flag player grandpartyaddons.utility.linear_conversation.queues.<def[name]>:<queue>
    - run <script> def:<def[name]>|false
  }

gpa_utility_linear_conversation_cmd:
  type: command
  debug: false
  name: gpalcu
  description: 'Uses the GrandPartyAddons Linear Conversation Utility tool.'
  usage: /gpalcu <&lt>help|reload|run<&gt> (conversation) (step) (player)
  allowed help:
  - if <context.server>
    || <player.is_op||false>
    || <player.has_permission[grandpartyaddons.utility.linear_conversation]||false>]>
    || <player.has_flag[grandpartyaddons.permission.linear_conversation]||false> {
    - determine true
  }
  tab complete:
  - if !<context.server>
    && !<player.is_op||false>
    && !<player.has_permission[grandpartyaddons.utility.linear_conversation]||false>]>
    && !<player.has_flag[grandpartyaddons.permission.linear_conversation]||false> {
    - queue clear
  }
  - define s '<context.raw_args.to_list.count[ ]>'
  - if <def[s]> == 0 {
    - determine <li@help|reload|run.filter[starts_with[<context.args.first||>]]>
  }
  else if <def[s]> == 1 && <context.args.first||null> == 'run' {
    - determine <server.list_flags[grandpartyaddons.utility.linear_conversations.loaded.].parse[after_last[.].to_lowercase].filter[starts_with[<context.args.get[2]||>]]>
  }
  else if <def[s]> == 3 && <context.args.first||null> == 'run' {
    - determine <server.list_online_players.parse[name].filter[<context.args.get[4]||>]>
  }

  script:
  - if !<context.server||false>
    && !<player.is_op||false>
    && !<player.has_permission[grandpartyaddons.utility.linear_conversation]||false>
    && !<player.has_flag[grandpartyaddons.permission.linear_conversation]||false> {
    - queue clear
  }
  - choose <context.args.get[1]||null>:
    - case reload:
      - narrate '<&a>Attempting to reload GPU LCU conversations. Check console for any errors.' format:gpa_utility_linear_conversation_format
      - run gpa_utility_linear_conversation_yaml_loader
    - case run:
      - define name '<context.args.get[2]||null>'
      - define step '<context.args.get[3]||null>'
      - if <server.flag[grandpartyaddons.utility.linear_conversations.loaded.<def[name]>]||null> == null {
        - narrate '<&c>Conversation <&dq><def[name]><&dq> does not exist!' format:gpa_utility_linear_conversation_format
        - queue clear
      }
      - if !<def[step].matches[\d+]> {
        - define step '1'
      }
      - if <context.server> && !<server.list_online_players.parse[name].contains[<context.args.get[4]||>]> {
        - narrate '<&c>Invalid player! The player must be online!' format:gpa_utility_linear_conversation_format
      }
      - define player '<server.match_player[<context.args.get[4]||null+>]||<player>>'
      - narrate '<&f>Attempting to run a conversation <&dq><def[name]><&dq> at step <def[step]> for <def[player].name>.
        Check console for any errors.' format:gpa_utility_linear_conversation_format
      - foreach <queue.list.filter[id.starts_with[gpa_utility_lcu_<player.uuid.replace[-]>_c_<def[name]>_s_]]> {
        - queue <def[value]> clear
      }
      - run gpa_utility_linear_conversation_task player:<def[player]> def:<def[name]>|true|<def[step]>
        id:gpa_utility_lcu_<def[player].uuid.replace[-]>_c_<def[name]>_s_<def[step]>
    - default:
      - narrate '<&f>GrandPartyUtilities Linear Conversation Tool Help<&co>'
      - narrate '<&7>/gpalcu help || <&8>Displays this help page.'
      - narrate '<&7>/gpalcu reload || <&8>Reloads conversations from file. Performs a recursive check for all YAML files in the folder
        <&dq>/plugins/GrandPartyUtilities/linear_conversations/<&dq>'
      - narrate '<&7>/gpalcu run <&lt>conversation<&gt> (step) (player) || <&8>Runs a conversation, with an optional step argument for the specific
        step to use and an optional player argument. If the command is run by CONSOLE, the step and player arguments are mandatory.'

gpa_utility_linear_conversation_evts:
  type: world
  debug: false
  events:
    on server start:
    - run gpa_utility_linear_conversation_yaml_loader

gpa_utility_linear_conversation_yaml_loader:
  type: task
  debug: false
  speed: 0
  data:
    example_conversation:
    - '# '
    - '# WARNING: When using Denizen tags, please be careful!'
    - '# '
    - '# '
    - ''
    - 'example_conversation:'
    - '    1:'
    - '        text: <&sq>[Server] This is an example conversation.<&sq>'
    - '        delay: 2'
    - '    2:'
    - '        text: <&sq>[Server] You will be required to understand that you need to escape relevant special characters, such as single quotes
      (&sq), double quotes (&quo), and colons (&co).<&sq>'
    - '        delay: 2'
    - '    3:'
    - '        text: <&sq>[Server] A missing step will cause the conversation to stop with no errors, because the utility will assume you wanted to
      end there but added in a delay key for no reason.<&sq>'
    - '        delay: 2'
    - '    4:'
    - '        text: <&sq>[Server] You can use color codes by replacing & with <&pc>. For example, <&pc>agreen<&pc>r! You can also\nsplit
      lines!<&sq>'
    - '        delay: 2'
    - '    5:'
    - '        text: <&sq>[Server] You can use any valid, relevant Denizen tags. For example, you can use the &lt&chr[UNICODE_ENCODING]&gt tag to
      return a Unicode character (for example, a heart would be &lt&chr[2665]&gt).<&sq>'
    - '        delay: 2'
    - '    6:'
    - '        text: <&sq>[Server] When using tags, remember that only the player is attached.<&sq>'
    - '        delay: 2'
    - '    7:'
    - '        text: <&sq>[Server] You can also choose to run a script using the &quorun_script&quo key. The specified script must be valid and
      loaded into the server.<&sq>'
    - '        delay: 2'
    - '    8:'
    - '        text: <&sq>[Server] To end a conversation, simply put no delay key.<&sq>'

  script:
  - narrate '<&f>Beginning to load files. Please check console for errors...' format:gpa_utility_linear_conversation_format
  - ~run locally unload_yaml_configs
  - ~run locally validate_existence
  - ~run locally recursive_file_search
  - ~run locally load_files
  - narrate '<&a>OKAY! <&f>Loading finished.' format:gpa_utility_linear_conversation_format

  unload_yaml_configs:
  - foreach <yaml.list.filter[starts_with[gpa_utility_linear_conversation_]]> {
    - yaml unload id:<def[value]>
  }
  - flag server grandpartyaddons.utility.linear_conversations:!

  validate_existence:
  - if <server.list_files[../GrandPartyUtilities/linear_conversations/].is_empty||true> {
    - announce to_console '<&c>WARNING! <&f>The <&dq>/plugins/GrandPartyUtilities/linear_conversations/<&dq> folder is empty or missing! Now creating
      the example conversation, and the folder if necessary.' format:gpa_utility_linear_conversation_format
    - log '' type:clear file:/plugins/GrandPartyUtilities/linear_conversations/example_conversation.yml
    - foreach <script.yaml_key[data.example_conversation]> {
      - log <parse:<def[value]>>
        type:none file:/plugins/GrandPartyUtilities/linear_conversations/example_conversation.yml
    }
  }
  else {
    - announce to_console '<&a>OKAY! <&f>Confirmed existence of files in the <&dq>/plugins/GrandPartyUtilities/linear_conversations/<&dq> folder.'
      format:gpa_utility_linear_conversation_format
  }

  recursive_file_search:
  - define start_dir '<def[1]||>'
  - define yml_id_list li@
  - foreach <server.list_files[../GrandPartyUtilities/linear_conversations/<def[start_dir]>]> {
    - if <def[value].ends_with[.yml]> || <def[value].ends_with[.yaml]> {
      - define yaml gpa_utility_linear_conversation_<util.random.uuid.replace[-]>
      - while <def[yml_id_list].contains[<def[yaml]>]> {
        - define yaml gpa_utility_linear_conversation_<util.random.uuid.replace[-]>
      }
      - announce to_console '<&7>READING... <&f>Found <def[value]>' format:gpa_utility_linear_conversation_format
      - flag server grandpartyaddons.utility.linear_conversations.files:->:<def[start_dir]><def[value]>==<def[yaml]>
      - foreach next
    }
    - if <server.list_files[../GrandPartyUtilities/linear_conversations/<def[start_dir]><def[value]>].is_empty||true> {
      - foreach next
    }
    - ~run locally recursive_file_search def:<def[start_dir]><def[value]>/
  }

  load_files:
  - if <server.flag[grandpartyaddons.utility.linear_conversations.files].as_list.is_empty||true> {
    - announce to_console '<&c>ERROR! <&f>There currently is no file name to YAML ID data stored. Please run the <&dq>recursive_file_search<&dq> path
      before attempting to load files.' format:gpa_utility_linear_conversation_format
  }
  - define yaml_list li@
  - foreach <server.flag[grandpartyaddons.utility.linear_conversations.files].as_list> {
    - yaml create id:<def[value].after[==]>
    - yaml load:../GrandPartyUtilities/linear_conversations/<def[value].before[==]> id:<def[value].after[==]>
    - if !<yaml.list.contains[<def[value].after[==]>]> {
      - announce to_console '<&c>ERROR! <&f>An invalid or missing YAML configuration was detected. Please check this file for any potential errors<&co>
        <&dq><def[value].before[==]><&dq>' format:gpa_utility_linear_conversation_format
      - foreach next
    }
    - define yaml_list <def[yaml_list].include[<def[value].after[==]>]>
  }
  - define duplicate_warn li@
  - foreach <def[yaml_list]> {
    - define id <def[value]>
    - foreach <yaml[<def[id]>].list_keys[]> {
      - if <def[conv_<def[value]>_exists]||false> {
        - define duplicate_warn <def[duplicate_warn].include[<def[value]>]>
        - announce to_console '<&c>WARNING! <&f>Found a duplicate <&dq><def[value]><&dq>. Skipping...' format:gpa_utility_linear_conversation_format
        - foreach next
      }
      - define conv_<def[value]>_exists true
      - flag server grandpartyaddons.utility.linear_conversations.loaded.<def[value]>:<def[id]>
    }
  }
  - if !<def[duplicate_warn].is_empty> {
    - announce to_console '<&c>WARNING! <&f>One or more conversation names were duplicated. Duplicate conversations will not always react the way
      you want them to. The following name(s) were detected as duplicates<&co>' format:gpa_utility_linear_conversation_format
    - announce to_console '<&f><def[duplicate_warn].formatted>' format:gpa_utility_linear_conversation_format
  }

gpa_utility_linear_conversation_format:
  type: format
  debug: false
  format: '[<&a>GPA <&7>LCU<&f>] <text>'